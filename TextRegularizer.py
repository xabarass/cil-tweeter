import re
from stemming.porter2 import stem

sad_emoticon_pattern=re.compile(
        r"[\:\;\=][\w'-\*-]*[\(\[\{\\\/<\|@]|[\)\]\}\\\/<\|][\w'-\*-]*[\:\;\=]",
        re.M | re.DOTALL
    )

happy_emoticon_pattern=re.compile(
        r"[\:\;\=][\w'-\*-]*[\)\]\}]|[\(\[\{][\w'-\*-]*[\:\;\=]",
        re.M | re.DOTALL
    )

haha_pattern=re.compile(
        r"a+h+a+.{0,3}|h+a+h.{0,3}|e+h+e+.{0,3}|h+e+h.{0,3}",
        re.M | re.DOTALL
    )

happybirthday_pattern=re.compile(
        r"happybirthday.*",
        re.M | re.DOTALL
    )

time_pattern=re.compile(
        r"[0-9:\.]+[amp]+",
        re.M | re.DOTALL
    )

date_pattern=re.compile(
        r"(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})",
        re.M | re.DOTALL
    )

def _convert_sad_emoticons(word):
    if sad_emoticon_pattern.match(word):
        return True, [':(']
    else:
        return False, None

def _convert_happy_emoticons(word):
    if happy_emoticon_pattern.match(word):
        return True, [':)']
    else:
        return False, None

def _convert_haha(word):
    if haha_pattern.match(word):
        return True, ['haha']
    else:
        return False, None

def _convert_happy_birthday(word):
    if happybirthday_pattern.match(word):
        return True, ['happybirthday']
    else:
        return False, None

def _convert_hashtag(word):
    if word.startswith('#'):
        big_word=word[1:]
        match_found=False

        def find_subwords(from_index, end_index):
            if from_index==end_index:
                return []

            subwords=[]

            while len(subwords)==0 and from_index<end_index-1:
                current_subwords=[]

                to_index=end_index
                while not from_index==to_index:
                    current_word=big_word[from_index:to_index]
                    # print("Comparing %s" %current_word)
                    if current_word in word_to_id:
                        # print("Found word %s" %current_word)
                        current_subwords.append(current_word)
                        current_subwords+=find_subwords(to_index, len(big_word))
                        break
                    else:
                        to_index=to_index-1

                if len(current_subwords)<len(subwords) or len(subwords)==0:
                    subwords=current_subwords[:]
                from_index=from_index+1

            return subwords

        word_list=find_subwords(0, len(big_word))
        # print("Replacing %s with" %word)
        # print(word_list)
        return True, word_list
    else:
        return False,None

regularizeing_functions=[]

regularizeing_functions.append(_convert_sad_emoticons)
regularizeing_functions.append(_convert_happy_emoticons)
regularizeing_functions.append(_convert_haha)
regularizeing_functions.append(_convert_happy_birthday)
regularizeing_functions.append(_convert_hashtag)

def regularize_word(word):
    for item in regularizeing_functions:
        matched, new_word=item(word)
        if matched:
            return new_word

    return [word]

tagging_functions=[]

def _tag_number(word):
    number_of_digits=numbers = sum(c.isdigit() for c in word)
    if number_of_digits>3 and len(word)<=number_of_digits+3:
        return True, 'number'
    else:
        return False, None

tagging_functions.append(_tag_number)

def tag_word(word):
    for item in tagging_functions:
        matched, new_word=item(word)
        if matched:
            # print("Found a match, tagging %s with %s" %(word,new_word))
            return new_word

    return word

word_to_id=None

def get_special_words(words):
    '''
    Used to extend dicitonary with wrods that will be generated by regularizer
    :return: list of replacement words
    '''
    global word_to_id
    word_to_id=words
    return [':(',':)','haha','happybirthday', 'time', 'date', 'number']